// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  phone     String   @unique
  password  String
  role      UserRole
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile relationships
  patientProfile PatientProfile?
  doctorProfile  DoctorProfile?
  adminProfile   AdminProfile?

  // Relationships
  sentMessages     AIAgentMessage[] @relation("MessageSender")
  receivedMessages AIAgentMessage[] @relation("MessageReceiver")
  appointments     Appointment[]    @relation("PatientAppointments")
  doctorAppointments Appointment[]  @relation("DoctorAppointments")
  medicalRecords   MedicalRecord[]  @relation("PatientRecords")
  doctorRecords    MedicalRecord[]  @relation("DoctorRecords")
  payments         PaymentTransaction[]
  videoConsultations VideoConsultation[] @relation("PatientConsultations")
  doctorConsultations VideoConsultation[] @relation("DoctorConsultations")
  healthInsights   HealthInsight[]
  auditLogs        AuditLog[]
  consultationsAsPatient Consultation[] @relation("PatientConsultations")
  consultationsAsDoctor  Consultation[] @relation("DoctorConsultations")
  consultationMessages   ConsultationMessage[] @relation("ConsultationMessageSender")
  aiProfiles             AIProfile[] @relation("AIProfileUser")
  patientReviews         DoctorReview[] @relation("PatientReviews")
  aiMessages             AIMessage[] @relation("AIMessageUser")
  aiConversationSummary  AIConversationSummary?

  @@map("users")
}

model PatientProfile {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @unique @db.ObjectId
  firstName        String
  lastName         String
  dateOfBirth      DateTime
  gender           Gender
  emergencyContact String
  preferredLanguage String @default("en")
  
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  familyMembers  FamilyMember[]
  
  @@map("patient_profiles")
}

model DoctorProfile {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @db.ObjectId
  firstName       String
  lastName        String
  licenseNumber   String   @unique
  specialization  String[]
  experience      Int
  qualifications  String[]
  consultationFee Float
  languages       String[]
  qualityScore    Float    @default(0)
  isVerified      Boolean  @default(false)
  
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  availabilitySlots AvailabilitySlot[]
  qualityMetrics    DoctorQualityMetrics?
  reviews           DoctorReview[] @relation("DoctorReviews")
  location          Json? // {latitude: number, longitude: number, address: string}
  
  @@map("doctor_profiles")
}

model AdminProfile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  firstName   String
  lastName    String
  department  String
  permissions String[]
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("admin_profiles")
}

model FamilyMember {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  patientId         String    @db.ObjectId
  firstName         String
  lastName          String
  relationship      String
  dateOfBirth       DateTime
  gender            Gender    @default(OTHER)
  phone             String?
  emergencyContact  String?
  medicalHistory    String[]  @default([])
  allergies         String[]  @default([])
  currentMedications String[] @default([])
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  patient         PatientProfile @relation(fields: [patientId], references: [id], onDelete: Cascade)
  medicalRecords  MedicalRecord[]
  
  @@map("family_members")
}

model MedicalRecord {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  patientId        String      @db.ObjectId
  doctorId         String?     @db.ObjectId
  familyMemberId   String?     @db.ObjectId
  date             DateTime    @default(now())
  symptoms         String[]
  diagnosis        String
  visitSummary     String
  riskLevel        RiskLevel
  riskScore        Int
  riskFactors      String[]
  aiRecommendation String
  followUpRequired Boolean     @default(false)
  followUpDate     DateTime?
  
  patient      User           @relation("PatientRecords", fields: [patientId], references: [id])
  doctor       User?          @relation("DoctorRecords", fields: [doctorId], references: [id])
  familyMember FamilyMember?  @relation(fields: [familyMemberId], references: [id])
  prescriptions Prescription[]
  
  @@map("medical_records")
}

model Prescription {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  medicalRecordId  String @db.ObjectId
  medicationName   String
  genericName      String?
  dosage           String
  frequency        String
  duration         String
  instructions     String
  warnings         String[]
  interactions     String[]
  
  medicalRecord MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  
  @@map("prescriptions")
}

model Appointment {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  patientId       String            @db.ObjectId
  doctorId        String            @db.ObjectId
  scheduledAt     DateTime
  duration        Int               @default(30)
  type            AppointmentType
  status          AppointmentStatus @default(SCHEDULED)
  symptoms        String[]
  riskLevel       RiskLevel
  riskScore       Int
  consultationNotes String?
  paymentStatus   PaymentStatus     @default(PENDING)
  paymentAmount   Float
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  patient           User                @relation("PatientAppointments", fields: [patientId], references: [id])
  doctor            User                @relation("DoctorAppointments", fields: [doctorId], references: [id])
  payments          PaymentTransaction[]
  videoConsultation VideoConsultation?
  consultation      Consultation?
  
  @@map("appointments")
}

model AvailabilitySlot {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  doctorId    String  @db.ObjectId
  dayOfWeek   Int     // 0-6 (Sunday-Saturday)
  startTime   String  // HH:MM format
  endTime     String  // HH:MM format
  isAvailable Boolean @default(true)
  
  doctor DoctorProfile @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  
  @@map("availability_slots")
}

model AIAgentMessage {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  agentType   AgentType
  fromUserId  String      @db.ObjectId
  toUserId    String?     @db.ObjectId
  content     String
  messageType MessageType
  metadata    Json?
  isProcessed Boolean     @default(false)
  createdAt   DateTime    @default(now())
  
  sender   User  @relation("MessageSender", fields: [fromUserId], references: [id])
  receiver User? @relation("MessageReceiver", fields: [toUserId], references: [id])
  
  @@map("ai_agent_messages")
}

model PaymentTransaction {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  appointmentId       String        @db.ObjectId
  patientId           String        @db.ObjectId
  amount              Float
  currency            String        @default("INR")
  method              PaymentMethod
  status              PaymentStatus @default(PENDING)
  gatewayTransactionId String?
  gatewayResponse     Json?
  createdAt           DateTime      @default(now())
  completedAt         DateTime?
  
  appointment Appointment @relation(fields: [appointmentId], references: [id])
  patient     User        @relation(fields: [patientId], references: [id])
  
  @@map("payment_transactions")
}

model VideoConsultation {
  id            String                    @id @default(auto()) @map("_id") @db.ObjectId
  appointmentId String                    @unique @db.ObjectId
  roomId        String                    @unique
  accessToken   String
  status        VideoConsultationStatus   @default(WAITING)
  startedAt     DateTime?
  endedAt       DateTime?
  recordingUrl  String?
  patientId     String                    @db.ObjectId
  doctorId      String                    @db.ObjectId
  patientJoined Boolean                   @default(false)
  doctorJoined  Boolean                   @default(false)
  createdAt     DateTime                  @default(now())
  
  appointment Appointment @relation(fields: [appointmentId], references: [id])
  patient     User        @relation("PatientConsultations", fields: [patientId], references: [id])
  doctor      User        @relation("DoctorConsultations", fields: [doctorId], references: [id])
  
  @@map("video_consultations")
}

model DoctorQualityMetrics {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  doctorId             String   @unique @db.ObjectId
  totalConsultations   Int      @default(0)
  averageRating        Float    @default(0)
  diagnosticAccuracy   Float    @default(0)
  responseTime         Float    @default(0)
  followUpCompliance   Float    @default(0)
  patientSatisfaction  Float    @default(0)
  qualityScore         Float    @default(0)
  lastUpdated          DateTime @updatedAt
  
  doctor DoctorProfile @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  
  @@map("doctor_quality_metrics")
}

model HealthInsight {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  patientId      String      @db.ObjectId
  type           InsightType
  title          String
  description    String
  severity       Severity
  confidence     Float
  actionRequired Boolean     @default(false)
  isRead         Boolean     @default(false)
  generatedAt    DateTime    @default(now())
  
  patient User @relation(fields: [patientId], references: [id])
  
  @@map("health_insights")
}

model SystemAlert {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  type           AlertType
  severity       Severity
  title          String
  description    String
  affectedEntity String
  entityId       String
  isResolved     Boolean     @default(false)
  assignedTo     String?
  createdAt      DateTime    @default(now())
  resolvedAt     DateTime?
  
  @@map("system_alerts")
}

model AuditLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId
  action    String
  entity    String
  entityId  String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  user User? @relation(fields: [userId], references: [id])
  
  @@map("audit_logs")
}

model Consultation {
  id            String                @id @default(auto()) @map("_id") @db.ObjectId
  appointmentId String                @unique @db.ObjectId
  patientId     String                @db.ObjectId
  doctorId      String                @db.ObjectId
  status        ConsultationStatus    @default(ACTIVE)
  startedAt     DateTime              @default(now())
  completedAt   DateTime?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  
  appointment Appointment             @relation(fields: [appointmentId], references: [id])
  patient     User                    @relation("PatientConsultations", fields: [patientId], references: [id])
  doctor      User                    @relation("DoctorConsultations", fields: [doctorId], references: [id])
  messages    ConsultationMessage[]
  summary     ConsultationSummary?
  
  @@map("consultations")
}

model ConsultationMessage {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  consultationId String      @db.ObjectId
  senderId       String      @db.ObjectId
  content        String
  messageType    MessageType @default(TEXT)
  timestamp      DateTime    @default(now())
  isRead         Boolean     @default(false)
  
  consultation Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  sender       User         @relation("ConsultationMessageSender", fields: [senderId], references: [id])
  
  @@map("consultation_messages")
}

model ConsultationSummary {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  consultationId String   @unique @db.ObjectId
  doctorSummary  String
  patientSummary String
  keyPoints      String[]
  recommendations String[]
  prescriptions  String[] @default([])
  followUpRequired Boolean @default(false)
  diagnosis      String?
  treatmentPlan  String?
  currentStatus  String?
  isComplete     Boolean  @default(false)
  generatedAt    DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  consultation Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  
  @@map("consultation_summaries")
}

model AIProfile {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  appointmentId String      @db.ObjectId
  userId        String      @db.ObjectId
  profileType   ProfileType
  aiSummary     String
  visibleTo     String      @db.ObjectId
  generatedAt   DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  user User @relation("AIProfileUser", fields: [userId], references: [id])
  
  @@map("ai_profiles")
}

model DoctorReview {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  doctorProfileId  String   @db.ObjectId
  patientId        String   @db.ObjectId
  rating           Float
  comment          String?
  createdAt        DateTime @default(now())

  doctor  DoctorProfile @relation("DoctorReviews", fields: [doctorProfileId], references: [id])
  patient User          @relation("PatientReviews", fields: [patientId], references: [id])

  @@map("doctor_reviews")
}

// Enums
enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AppointmentType {
  VIDEO
  CHAT
  EMERGENCY
}

enum AppointmentStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  REFUNDED
  DEFERRED
}

enum PaymentMethod {
  CARD
  WALLET
  EMI
  DEFERRED
}

enum AgentType {
  PATIENT
  DOCTOR
  ADMIN
}

enum MessageType {
  TEXT
  SYMPTOM_ANALYSIS
  APPOINTMENT_BOOKING
  PRESCRIPTION
  ALERT
  IMAGE
  FILE
  SYSTEM
  AI_SUMMARY
}

enum VideoConsultationStatus {
  WAITING
  ACTIVE
  ENDED
}

enum InsightType {
  PREDICTION
  TREND
  ALERT
  RECOMMENDATION
}

enum Severity {
  INFO
  WARNING
  CRITICAL
}

enum AlertType {
  FRAUD_DETECTION
  COMPLIANCE_VIOLATION
  SYSTEM_ERROR
  PERFORMANCE_ISSUE
}

enum ConsultationStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ProfileType {
  PATIENT
  DOCTOR
}

// AI Conversation Memory Models
model AIMessage {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  role        AIMessageRole
  content     String
  messageType String   @default("text")
  metadata    Json?
  createdAt   DateTime @default(now())
  
  user        User     @relation("AIMessageUser", fields: [userId], references: [id])
  
  @@map("ai_messages")
}

model AIConversationSummary {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  summary   String
  keyFacts  String[] @default([])
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id])
  
  @@map("ai_conversation_summaries")
}

model AIKBVector {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  namespace String   @default("global")
  docId     String
  title     String
  text      String
  tags      String[] @default([])
  vector    Float[]
  createdAt DateTime @default(now())
  
  @@index([namespace, docId])
  @@map("ai_kb_vectors")
}

enum AIMessageRole {
  USER
  AI
}
